$version Generated by VerilatedVcd $end
$date Mon Nov 28 14:44:21 2022 $end
$timescale 1ps $end

 $scope module TOP $end
  $var wire  1 X EQOut $end
  $var wire  1 Z WEnOut $end
  $var wire 32 Y a0 [31:0] $end
  $var wire  1 V clk $end
  $var wire  1 W rst $end
  $scope module cpu $end
   $var wire 32 _ ADDRESS_WIDTH [31:0] $end
   $var wire 32 a ALU_CONTROL_LENGTH [31:0] $end
   $var wire  3 N ALUctrl [2:0] $end
   $var wire 32 P ALUop2 [31:0] $end
   $var wire 32 J ALUout [31:0] $end
   $var wire  1 M ALUsrc $end
   $var wire 32 ` DATA_WIDTH [31:0] $end
   $var wire  1 H EQ $end
   $var wire  1 X EQOut $end
   $var wire 32 ` INSTR_WIDTH [31:0] $end
   $var wire 32 I Imm [31:0] $end
   $var wire  5 K Imm11to7 [11:7] $end
   $var wire 12 U Imm31to20 [31:20] $end
   $var wire 32 [ PC [31:0] $end
   $var wire 32 ` PC_WIDTH [31:0] $end
   $var wire  1 G PCsrc $end
   $var wire  1 M WEn $end
   $var wire  1 Z WEnOut $end
   $var wire 32 Y a0 [31:0] $end
   $var wire  1 V clk $end
   $var wire  3 T funct3 [14:12] $end
   $var wire  1 O immSrc $end
   $var wire 32 L instruction [31:0] $end
   $var wire  7 S opcode [6:0] $end
   $var wire  5 K rd [4:0] $end
   $var wire 32 % read1 [31:0] $end
   $var wire 32 & read2 [31:0] $end
   $var wire  5 Q rs1 [4:0] $end
   $var wire  5 R rs2 [4:0] $end
   $var wire  1 W rst $end
   $scope module ALU $end
    $var wire 32 a ALUCTRL_WIDTH [31:0] $end
    $var wire  3 N ALUCtrl [2:0] $end
    $var wire 32 % ALUop1 [31:0] $end
    $var wire 32 P ALUop2 [31:0] $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire  1 H EQ $end
    $var wire 32 J SUM [31:0] $end
   $upscope $end
   $scope module ALUMux $end
    $var wire 32 P ALUop2 [31:0] $end
    $var wire  1 M ALUsrc $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire 32 & in0 [31:0] $end
    $var wire 32 I in1 [31:0] $end
   $upscope $end
   $scope module CtrlUnit $end
    $var wire  3 N ALUctrl [2:0] $end
    $var wire  1 M ALUsrc $end
    $var wire  1 H EQ $end
    $var wire  1 O ImmSrc $end
    $var wire  1 G PCsrc $end
    $var wire  1 M RegWrite $end
    $var wire  3 T funct3 [14:12] $end
    $var wire  7 S opcode [6:0] $end
   $upscope $end
   $scope module Decode $end
    $var wire 32 _ ADDRESS_WIDTH [31:0] $end
    $var wire 32 ` INSTR_WIDTH [31:0] $end
    $var wire  5 K Imm11to7 [11:7] $end
    $var wire 12 U Imm31to20 [31:20] $end
    $var wire  3 T funct3 [14:12] $end
    $var wire 32 L instr [31:0] $end
    $var wire  7 S opcode [6:0] $end
    $var wire  5 Q rs1 [4:0] $end
    $var wire  5 R rs2 [4:0] $end
    $var wire  5 K rsd [4:0] $end
   $upscope $end
   $scope module InstrMem $end
    $var wire 32 ` ADDRESS_WIDTH [31:0] $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire 32 [ PC [31:0] $end
    $var wire 32 L instr [31:0] $end
    $var wire 32 # rom_array[-1] [31:0] $end
    $var wire 32 $ rom_array[0] [31:0] $end
   $upscope $end
   $scope module ProgramCount $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire 32 I ImmOp [31:0] $end
    $var wire 32 [ PC [31:0] $end
    $var wire 32 ` PC_WIDTH [31:0] $end
    $var wire  1 G PCsrc $end
    $var wire 32 ] branch_PC [31:0] $end
    $var wire  1 V clk $end
    $var wire 32 \ inc_PC [31:0] $end
    $var wire 32 ^ next_PC [31:0] $end
    $var wire  1 W rst $end
   $upscope $end
   $scope module Sec $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire  5 K Imm11to7 [11:7] $end
    $var wire 12 U Imm31to20 [31:20] $end
    $var wire 32 I ImmOp [31:0] $end
    $var wire  1 O ImmSrc $end
   $upscope $end
   $scope module regfile $end
    $var wire  5 Q AD1 [4:0] $end
    $var wire  5 R AD2 [4:0] $end
    $var wire  5 K AD3 [4:0] $end
    $var wire 32 _ ADDRESS_WIDTH [31:0] $end
    $var wire 32 ` DATA_WIDTH [31:0] $end
    $var wire 32 % RD1 [31:0] $end
    $var wire 32 & RD2 [31:0] $end
    $var wire 32 J WD3 [31:0] $end
    $var wire  1 M WE3 $end
    $var wire 32 Y a0 [31:0] $end
    $var wire  1 V clk $end
    $var wire 32 ' rom_array[0] [31:0] $end
    $var wire 32 1 rom_array[10] [31:0] $end
    $var wire 32 2 rom_array[11] [31:0] $end
    $var wire 32 3 rom_array[12] [31:0] $end
    $var wire 32 4 rom_array[13] [31:0] $end
    $var wire 32 5 rom_array[14] [31:0] $end
    $var wire 32 6 rom_array[15] [31:0] $end
    $var wire 32 7 rom_array[16] [31:0] $end
    $var wire 32 8 rom_array[17] [31:0] $end
    $var wire 32 9 rom_array[18] [31:0] $end
    $var wire 32 : rom_array[19] [31:0] $end
    $var wire 32 ( rom_array[1] [31:0] $end
    $var wire 32 ; rom_array[20] [31:0] $end
    $var wire 32 < rom_array[21] [31:0] $end
    $var wire 32 = rom_array[22] [31:0] $end
    $var wire 32 > rom_array[23] [31:0] $end
    $var wire 32 ? rom_array[24] [31:0] $end
    $var wire 32 @ rom_array[25] [31:0] $end
    $var wire 32 A rom_array[26] [31:0] $end
    $var wire 32 B rom_array[27] [31:0] $end
    $var wire 32 C rom_array[28] [31:0] $end
    $var wire 32 D rom_array[29] [31:0] $end
    $var wire 32 ) rom_array[2] [31:0] $end
    $var wire 32 E rom_array[30] [31:0] $end
    $var wire 32 F rom_array[31] [31:0] $end
    $var wire 32 * rom_array[3] [31:0] $end
    $var wire 32 + rom_array[4] [31:0] $end
    $var wire 32 , rom_array[5] [31:0] $end
    $var wire 32 - rom_array[6] [31:0] $end
    $var wire 32 . rom_array[7] [31:0] $end
    $var wire 32 / rom_array[8] [31:0] $end
    $var wire 32 0 rom_array[9] [31:0] $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#0
b00000000000000000000000000000000 #
b00000000000000000000000000000000 $
b00000000000000000000000000000000 %
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
0G
0H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000 K
b00000000000000000000000000000000 L
0M
b000 N
0O
b00000000000000000000000000000000 P
b00000 Q
b00000 R
b0000000 S
b000 T
b000000000000 U
0V
0W
0X
b00000000000000000000000000000000 Y
0Z
b00000000000000000000000000000000 [
b00000000000000000000000000000100 \
b00000000000000000000000000000000 ]
b00000000000000000000000000000100 ^
b00000000000000000000000000000101 _
b00000000000000000000000000100000 `
b00000000000000000000000000000011 a
